name: CI

on: [push, workflow_dispatch]

jobs:
  build:

    runs-on: windows-latest

    steps:
    #- name: Download Ngrok
    #  run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    #- name: Extract Ngrok
     # run: Expand-Archive ngrok.zip
    #- name: Ngrok Auth
     # run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      #env:
       # NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    - name: Enable TS
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
    - name: Enable Firewall Rule
      run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
    - name: Enable User Auth
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
    - name: Set Local User Password
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText $Env:ADMIN_PASSWORD -Force)
      env:
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
    #- name: Create Tunnel
     # run: .\ngrok\ngrok.exe tcp 3389

    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Install Remio
      run: npm install -g @remio/cli
    - name: Configure Remio
      run: remio-cli config set --api-key $Env:REMIO_KEY
      env:
        REMIO_KEY: ${{ secrets.REMIO_KEY }}
    - name: Start Remio
      run: remio-cli start
    - name: Run Tests
      run: npm test
